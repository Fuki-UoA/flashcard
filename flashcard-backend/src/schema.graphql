type AuthToken {
  accessToken: String!
  expiredAt: String!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type User {
    id: ID!
    email: String!
    firstname: String!
    lastname: String!
    course: [Course!]
}

type Course {
    id: ID!
    name: String!
    description: String!
    user: [User!]!
}

input LoginInput {
    email: String!
    password: String!
}

input UserInput {
    firstname: String!
    lastname: String!
    email: String!
    password: String!
}

input CourseInput {
    name: String!
    description: String!
}

type Query {
    user(id: ID!): User!
    users: [User!]!
    course(id: ID!): Course!
    courses: [Course!]!
}

type Mutation {
    login(input: LoginInput!): AuthResponse!
    updateUser(id: ID!,input: UserInput!): User!
    createUser(input: UserInput!): AuthResponse!
    updateCourse(id: ID!, input: CourseInput!): Course!
    createCourse(input: CourseInput!): Course!
    joinCourse(course: ID!): Course!
    leaveCourse(course: ID!): Course!
}